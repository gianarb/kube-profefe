<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kube-profefe on kube-profefe</title><link>/</link><description>Recent content in Kube-profefe on kube-profefe</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>/docs/introduciton/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/introduciton/</guid><description>Introduction This project is a bridge between profefe and Kubernetes. At the moment it serves two different binaries:
kubectl-profefe a kubectl plugin that helps you to capture pprof profiles, storing them locally or in profefe. It uses port-forwarding to expose the pprof port locally. kprofefe is a cli that you can run as a cronjob in your kubernetes cluster. It discovers running pods in your clusters, it downloads profiles and it pushes them in profefe.</description></item><item><title>Getting Started</title><link>/docs/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/getting-started/</guid><description>Goal The goal for this tutorial is to gather our first profile from a running pod via kubectl profefe plugin. We will store the profile locally, and we will push one to profefe
Prerequisites If you have those things already done move to the chapter &amp;ldquo;getting started&amp;rdquo;
Have a Kubernetes cluster up and running Deploy profefe inside or outside your Kubernetes cluster. But it has to be reachable from the Kubernetes cluster network.</description></item><item><title>Getting Started with kprofefe</title><link>/docs/getting-started-with-kprofefe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/getting-started-with-kprofefe/</guid><description>Goal The end goal here is to deploy a continuous profiling infrastructure in kubernetes, and to get profiles from our pod into profefe via kprofefe.
Prerequisites Have a Kubernetes cluster up and running Deploy profefe inside or outside your Kubernetes cluster. But it has to be reachable from the Kubernetes cluster network. I will assume that the URL for it is https://profefe.internal.company.com:10100 You should have the kubectl profefe plugin already installed (checkout the installation doc) Getting Started Find a candidate We have to find a good first candidate, a pod that runs an application that exposes the pprof handler.</description></item><item><title>Installation</title><link>/docs/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/installation/</guid><description>This project is made of two components. A kubectl plugin and the collector.
You can download both of them from the release page via GitHub.
kubectl profefe The kubectl plugin usually runs from your laptop, and it is built for multiple platforms: Linux, Mac.
Install via Krew krew is a package manager for kubectl plugins and you can use it to install kube-profefe:
kubectl krew install profefe
kprofefe The collector called kprofefe usually runs as a cronjob in Kubernetes.</description></item><item><title>Developing</title><link>/docs/developing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/developing/</guid><description>This project is written in Go and it uses go module as a dependency manager.
The tool chain I use is very simple and it does not require anything more than what Go requires.
$ go build cmd/kprofefe
$ go test ./...
$ go vet ./...
And so on.
Delivery This project is in continuous delivery and it uses GoReleaser with GitHub Actions.
Every time a new tag is pushed the CI runs GoReleser.</description></item><item><title>About</title><link>/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/about/</guid><description>Profefe is a project developed by @narqo. I was looking for a solution to do continuous profiling and I realized his code was well abstracted and comfortable to extend. The API server was already done and I decided to write an integration with Kubernetes.
The current maintainer is Gianluca aka @gianarb. Contributions are welcome on github.com/profefe/kube-profefe</description></item></channel></rss>